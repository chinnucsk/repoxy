%%%-------------------------------------------------------------------
%%% @author Sven Heyll <sven.heyll@gmail.com>
%%% @copyright (C) 2012, Sven Heyll
%%% Created : 19 Sep 2012 by Sven Heyll <sven.heyll@gmail.com>
%%%-------------------------------------------------------------------
-module(repoxy_project_test).
-include_lib("eunit/include/eunit.hrl").
-include("repoxy.hrl").
-include("../src/repoxy_project_server.hrl").

%% Tests %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

start_stop_test() ->
    Pid = start_server(),
    add_handler(),
    stop_server(Pid).

load_test() ->
    UM = unexpected_message,
    M = em:new(),
    mock_load_project(M, project_dir),
    em:strict(M, my_handler, on_project_event,
              [arg, ?on_internal_error({error, {unexpected_event, UM}})]),
    mock_unload_project(M),
    em:replay(M),
    Pid = start_server(),
    add_handler(),
    repoxy_project:load(project_dir),
    gen_fsm:send_event(whereis(repoxy_project_server), UM),
    await_load(),
    stop_server(Pid),
    em:await_expectations(M).

unload_test() ->
    M = em:new(),
    mock_load_project(M, project_dir),
    mock_unload_project(M),
    em:replay(M),
    Pid = start_server(),
    add_handler(),
    repoxy_project:load(project_dir),
    await_load(),
    repoxy_project:unload(),
    stop_server(Pid),
    em:await_expectations(M).


rebar_error_test() ->
    M = em:new(),
    mock_load_project(M, project_dir),
    em:strict(M, repoxy_project_rebar, rebar,
              [rebar_cfg, ['clean', 'get-deps', 'compile', 'repoxy_discover']],
              {return, {error, test_err}}),
    em:strict(M, my_handler, on_project_event, [arg, ?on_internal_error({error, test_err})]),
    em:replay(M),
    Pid = start_server(),
    add_handler(),
    repoxy_project:load(project_dir),
    await_load(),
    repoxy_project:clean_build(),
    em:await_expectations(M),
    %% Errors generated by the following lines "module could no be loaded" etc
    %% are only a result of killing the mock before stop_server/1.
    stop_server(Pid).


clean_build_test() ->
    M = em:new(),
    mock_load_project(M, project_dir),
    em:strict(M, repoxy_project_rebar, rebar,
              [rebar_cfg, ['clean', 'get-deps', 'compile', 'repoxy_discover']],
              {function, fun(_) ->
                                 gen_fsm:send_event(?SERVER, ?app_found(app_info_1)),
                                 %% fake a second finding of 'app_info_1'
                                 gen_fsm:send_event(?SERVER, ?app_found(app_info_1))
                         end}),
    em:strict(M, repoxy_project_code, load_app, [app_info_1]),
    em:strict(M, my_handler, on_project_event, [arg, ?on_app_load(app_info_1)]),

    %% loading the same app 2. time: must unload before loading again
    em:strict(M, my_handler, on_project_event, [arg, ?on_app_unload(app_info_1)]),
    em:strict(M, repoxy_project_code, unload_app, [app_info_1]),

    em:strict(M, repoxy_project_code, load_app, [app_info_1]),
    em:strict(M, my_handler, on_project_event, [arg, ?on_app_load(app_info_1)]),

    em:replay(M),
    Pid = start_server(),
    add_handler(),
    repoxy_project:load(project_dir),
    await_load(),
    repoxy_project:clean_build(),
    em:await_expectations(M),
    %% Errors generated by the following lines "module could no be loaded" etc
    %% are only a result of killing the mock before stop_server/1.
    stop_server(Pid).

%% Test utils %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mock_load_project(M, Dir) ->
    Self = self(),
    em:strict(M, repoxy_project_code, new_build_dir, [], {return, build_dir}),
    em:strict(M, repoxy_project_code, backup_node, [], {return, node_backup}),
    em:strict(M, repoxy_project_rebar, load_rebar, [Dir],
              {return, rebar_cfg}),
    em:strict(M, my_handler, on_project_event, [arg, ?on_load],
              {function, fun(_) -> Self ! on_load, ok end}).

mock_unload_project(M) ->
    Self = self(),
    em:strict(M, repoxy_project_code, restore_node, [node_backup]),
    em:strict(M, repoxy_project_code, clean_build_dir, [build_dir]),
    em:strict(M, my_handler, on_project_event, [arg, ?on_unload]).

add_handler() ->
    repoxy_project_events:add_sup_handler(my_handler, arg).

await_load() ->
    receive
        on_load -> ok
    after 1000 ->
            throw(expected_on_load)
    end.

start_server() ->
    process_flag(trap_exit, true),
    {ok, Pid} = repoxy_project_sup:start_link(),
    Pid.

stop_server(Pid) ->
    exit(Pid, normal),
    receive
        {'EXIT', Pid, normal} -> ok
    after 1000 ->
            throw(expected_stop_server)
    end.
